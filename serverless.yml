service: estimator-ai

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    S3_BUCKET: ${self:custom.bucketName}
    SQS_QUEUE_URL: https://sqs.${self:provider.region}.amazonaws.com/${aws:accountId}/${self:custom.queueName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - bedrock:InvokeModel
            - bedrock:ApplyGuardrail
          Resource: "*"
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource: 
            - "arn:aws:s3:::${self:custom.bucketName}/*"
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
          Resource: 
            - "arn:aws:sqs:${self:provider.region}:*:${self:custom.queueName}"

custom:
  bucketName: estimator-ai-results-${self:provider.stage}
  queueName: estimator-ai-queue-${self:provider.stage}

functions:
  estimate:
    handler: lambda-function/handler.lambda_handler
    timeout: 29 #seconds
    events:
      - http:
          path: estimate
          method: post
          private: true
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  processor:
    handler: lambda-function/processor.lambda_handler
    timeout: 900  # 15 minutes
    events:
      - sqs:
          arn: "arn:aws:sqs:${self:provider.region}:${aws:accountId}:${self:custom.queueName}"
          batchSize: 1

resources:
  Resources:
    # API Key
    EstimatorApiKey:
      Type: AWS::ApiGateway::ApiKey
      Properties:
        Name: estimator-ai-key-${self:provider.stage}
        Enabled: true

    # Usage Plan (obrigat√≥rio, mas sem limites)
    EstimatorUsagePlan:
      Type: AWS::ApiGateway::UsagePlan
      Properties:
        UsagePlanName: estimator-ai-plan-${self:provider.stage}
        ApiStages:
          - ApiId: !Ref ApiGatewayRestApi
            Stage: ${self:provider.stage}

    # Link API Key to Usage Plan
    EstimatorUsagePlanKey:
      Type: AWS::ApiGateway::UsagePlanKey
      Properties:
        KeyId: !Ref EstimatorApiKey
        KeyType: API_KEY
        UsagePlanId: !Ref EstimatorUsagePlan

    # Store API Key in Secrets Manager
    EstimatorApiKeySecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: estimator-ai/api-key-${self:provider.stage}
        SecretString: !Sub |
          {
            "apiKey": "${EstimatorApiKey}"
          }

    EstimatorS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - HEAD
              AllowedOrigins:
                - "*"
              MaxAge: 3000

    EstimatorS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref EstimatorS3Bucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: !Join
                - ""
                - - !GetAtt EstimatorS3Bucket.Arn
                  - "/*"

plugins:
  - serverless-python-requirements
